use bevy::prelude::*;
use serde::Serialize;

/// Build metadata information generated by vergen at compile time
#[derive(Debug, Clone, Serialize, Resource)]
pub struct BuildInfo {
    /// Git commit SHA
    pub git_sha: &'static str,
    /// Git branch name  
    pub git_branch: &'static str,
    /// Build timestamp
    pub build_timestamp: &'static str,
    /// Cargo target triple
    pub target_triple: &'static str,
    /// Rust compiler version
    pub rustc_version: &'static str,
    /// Package version
    pub package_version: &'static str,
    /// Git commit author
    pub git_commit_author: &'static str,
    /// System info
    pub system_info: &'static str,
}

impl BuildInfo {
    /// Get the build information from environment variables set by vergen
    pub fn get() -> Self {
        Self {
            git_sha: option_env!("VERGEN_GIT_SHA").unwrap_or("unknown"),
            git_branch: option_env!("VERGEN_GIT_BRANCH").unwrap_or("unknown"),
            build_timestamp: option_env!("VERGEN_BUILD_TIMESTAMP").unwrap_or("unknown"),
            target_triple: option_env!("VERGEN_CARGO_TARGET_TRIPLE").unwrap_or("unknown"),
            rustc_version: option_env!("VERGEN_RUSTC_SEMVER").unwrap_or("unknown"),
            package_version: env!("CARGO_PKG_VERSION"),
            git_commit_author: option_env!("VERGEN_GIT_COMMIT_AUTHOR_NAME").unwrap_or("unknown"),
            system_info: option_env!("VERGEN_SYSINFO_OS_VERSION").unwrap_or("unknown"),
        }
    }

    /// Format build info for logging
    pub fn format_for_log(&self) -> String {
        format!(
            "Build: {} ({}), Git: {} @ {}, Rust: {}, Target: {}",
            self.package_version,
            self.build_timestamp,
            &self.git_sha[..std::cmp::min(8, self.git_sha.len())], // Shortened SHA
            self.git_branch,
            self.rustc_version,
            self.target_triple
        )
    }
}

impl Default for BuildInfo {
    fn default() -> Self {
        Self::get()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_build_info_creation() {
        let build_info = BuildInfo::get();

        // Verify that build info can be created without panicking
        assert!(!build_info.package_version.is_empty());
        assert!(!build_info.git_sha.is_empty());
        assert!(!build_info.git_branch.is_empty());

        // Verify formatted log doesn't panic and contains expected content
        let formatted = build_info.format_for_log();
        assert!(formatted.contains("Build:"));
        assert!(formatted.contains("Git:"));
        assert!(formatted.contains("Rust:"));

        // Print build info for verification during development
        println!("Build Info: {}", formatted);
        println!("Git SHA: {}", build_info.git_sha);
        println!("Git Branch: {}", build_info.git_branch);
        println!("Build Time: {}", build_info.build_timestamp);
    }
}
